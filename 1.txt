useState

Возвращает значение с состоянием и функцию для его обновления.
Во время первоначального рендеринга возвращаемое состояние (state)
совпадает со значением, переданным в качестве первого аргумента (initialState).
Функция setState используется для обновления состояния. 
Она принимает новое значение состояния и ставит в очередь повторный рендер компонента.



useEffect
спользуя этот хук, вы сообщаете React, что ваш компонент должен что-то делать после отрисовки. 
React запомнит переданную вами функцию (мы будем называть ее «эффектом») 
и вызовет ее после обновления DOM. В нашем случае мы устанавливаем название документа. 
Кроме этого мы можем извлекать данные или вызывать любой другой императивный API.





useContext
Принимает объект контекста (значение, возвращённое из React.createContext)
и возвращает текущее значение контекста для этого контекста. 
Текущее значение контекста определяется пропом value ближайшего 
<MyContext.Provider> над вызывающим компонентом в дереве.

Когда ближайший <MyContext.Provider> над компонентом обновляется, 
этот хук вызовет повторный рендер с последним значением контекста, переданным этому провайдеру MyContex




useReducer
Альтернатива для useState. 
Принимает редюсер типа (state, action) => newState и 
возвращает текущее состояние в паре с методом dispatch.



useCallback
Передайте встроенный колбэк и массив зависимостей. 
Хук useCallback вернёт мемоизированную версию колбэка, 
который изменяется только, если изменяются значения одной из зависимостей. 
Это полезно при передаче колбэков оптимизированным дочерним компонентам, 
которые полагаются на равенство ссылок для предотвращения ненужных рендеров 